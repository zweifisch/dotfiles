alias reload-alias='source $HOME/.zsh_alias'

alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'
alias mkdir='mkdir -p'

alias lt='tree -L 1'

alias //=''
alias \#=''
alias gg='google -s 8'
alias va='vagrant'

alias timestamp='date +%s'

alias iex='rlwrap -a iex'
alias pry='rlwrap -a pry'
alias erl='rlwrap -a erl'

datetime(){
	date -d@$1 +%Y-%m-%d\ %H:%M:%S
}

alias vi="vim"
alias e='emacs -nw'
alias j="jobs -l"
alias grep='grep --colour'
alias grep-coffee='grep --include="*.coffee"'
alias grep-php='grep --include="*.php"'
alias grep-js='grep --include="*.js"'

alias short-line='awk "length < 200"'

alias leiser='amixer -q -c 0 sset Master 5%- unmute'
alias lauter='amixer -q -c 0 sset Master 5%+ unmute'

alias g='google'

alias total-play-time='bc <<< "$(find -name "*.mp3" -print0 | xargs -0 mp3info -p "%S\n" | paste -sd+ | bc) / 60" '

alias vbox='VBoxManage startvm'
alias vbox-list="VBoxManage -nologo list vms"
alias nb='newsbeuter'
alias pb='podbeuter'

alias curl-json="curl -H 'Content-Type: applicaiton/json' "
alias curl-ajax="curl -H 'X-Requested-With: XMLHttpRequest' "

alias svn-url='svn info | grep -i url | cut -d " " -f 2'

alias bc='bc -ql'

alias unrar-anyway='unrar x -kb -y'

alias droid='adb shell busybox'
alias dbox='dropbox'

alias start-adb='sudo `which adb` start-server'

alias dbox-crazy='echo 100000 | sudo tee /proc/sys/fs/inotify/max_user_watches'

alias psc='ps xawf -eo pid,user,cgroup,args'

alias mem-usage="ps aux | awk '{sum +=\$4}; END {print sum}'"

alias privoxy-socks="privoxy $HOME/.privoxy.conf"

alias playbook="ansible-playbook"

if [ -e /usr/bin/service ]; then
	start(){ sudo service $1 start }
	status(){ sudo service $1 status }
	stop(){ sudo service $1 stop }
	restart(){ sudo service $1 restart }
	reload(){ sudo service $1 reload }
fi

if [ -e /usr/bin/systemctl ]; then
	alias start='sudo systemctl start'
	alias stop='sudo systemctl stop'
	alias status='sudo systemctl status'
	alias restart='sudo systemctl restart'
fi

# Automatically background processes (no output to terminal etc)
alias z='echo $RANDOM > /dev/null; zz'
zz() {
	echo $*
	$* &> "/tmp/z-$1-$RANDOM" &!
}

for i in mupdf zathura; do
	alias "$i=z $i"
done

GRC=`which grc`
if [ $? = 0 ]; then
	alias colourify="$GRC -es --colour=auto"
	alias diff='colourify diff'
	alias make='colourify make'
	# alias gcc='colourify gcc'
	alias g++='colourify g++'
	alias as='colourify as'
	alias ld='colourify ld'
	alias netstat='colourify netstat'
	alias ping='colourify ping'
	alias traceroute='colourify /usr/sbin/traceroute'
fi

wow(){
	unrar x $1 && rm -f Readme.png $1
}

wow-url(){
	curl -sI $(curl -s "$1" | grep -F "http://sh.st/" | cut -d '"' -f 4) |\
		grep -i location | cut -d " " -f 2
}

view-tex(){
	xelatex "$1" && mupdf "${1%.*}.pdf"
}

# uname -a | grep -i ubuntu > /dev/null && alias 'pkg-install=sudo apt-get install'
# uname -a | grep -i ubuntu > /dev/null && alias 'pkg-search=apt-cache search'

which apt-get &> /dev/null
if [ $? = 0 ]; then
	yaourt-install(){
		results="$(apt-cache search $1)"
		echo "$results" | nl -w 3 -s ': ' | sed -e "s/[0-9]\+:/\x1b[32m&\x1b[0m/" 
		echo -n "===> "
		read num
		if [[ "$num" =~ ^[0-9]+$ ]]; then
			selected=$(sed -n "$num s/\([^ ]\) .*/\1/p" <<< "$results")
			echo "selected package: $selected"
			sudo apt-get install $selected
		fi
	}
	yaourt-remove(){
		results="$(dpkg --get-selections | grep -i $1 | grep -v deinstall | cut -f 1)"
		echo "$results" | nl -w 3 -s ': ' | sed -e "s/[0-9]\+:/\x1b[32m&\x1b[0m/" 
		echo -n "===> "
		read num
		if [[ "$num" =~ ^[0-9]+$ ]]; then
			selected=$(sed -n "$num s/\([^ ]\) .*/\1/p" <<< "$results")
			selected=$(sed -n "$num p" <<< "$results")
			echo "selected package: $selected"
			sudo apt-get remove $selected
		fi
	}
	yaourt-upgrade(){
		sudo apt-get upgrade
	}
	yaourt(){
		case $1 in
			-R)
				yaourt-remove $2
				;;
			-Syu)
				yaourt-upgrade
				;;
			*)
				yaourt-install $1
		esac
	}
fi


bright(){
	brightness=`echo "$1 * 0.1" | bc`
	redshiftgui -o -b $brightness
}

_bright(){
	A=( 5 6 7 8 9 10 )
	_arguments \
		 ":::($A)"
}
compdef _bright bright

alias chrome='z google-chrome --disk-cache-dir="/dev/shm/chrome/" &'
alias chrome-proxy='z google-chrome --disk-cache-dir="/dev/shm/chrome/" --proxy-server="socks5://localhost:7070" &'
alias chrome-dev='z google-chrome --disk-cache-dir="/dev/shm/chrome/" --allow-file-access-from-files  --disable-web-security --remote-debugging-port=9222 &'

alias play2='mplayer -ao alsa:device=hw=2.0'
alias play='mplayer'
alias play-shuffle='mplayer -shuffle -playlist <(find $(pwd) -iname \*.mp3)'

alias datafart='curl --data-binary @- datafart.com'

alias notebook='ipython notebook --pylab=inline'
alias cling='cling  -Wc++11-extensions -std=c++11'

alias phplint='find . -name "*.php" -exec php -l {} \; | grep -v "No syntax errors detected in"'
alias composer='composer.phar'
alias get-composer='curl -s https://getcomposer.org/installer | php'
# alias composer='php composer.phar'

alias last-ips="last | awk '{print \$3}' | sort | uniq -c | sort -rnk1"


alias secure="chmod 600 $1"

ghc-run(){
	ghc --make $1 && "./${1%.*}"
}

alias get-jquery='wget http://code.jquery.com/jquery-1.8.3.min.js'
alias get-jquery='wget http://code.jquery.com/jquery-1.9.1.min.js'
alias get-bootstrap-datepicker='wget https://raw.github.com/eternicode/bootstrap-datepicker/master/js/bootstrap-datepicker.js'
alias get-mustache='wget https://raw.github.com/janl/mustache.js/master/mustache.js'
alias get-hammer='wget https://raw.github.com/EightMedia/hammer.js/master/hammer.js'
alias get-zepto='wget http://zeptojs.com/zepto.min.js'
alias get-mocha='wget https://raw.github.com/visionmedia/mocha/master/mocha.js'
alias get-mocha-css='wget https://raw.github.com/visionmedia/mocha/master/mocha.css'
alias get-chai='wget https://raw.github.com/chaijs/chai/master/chai.js'
alias get-pathjs='wget https://raw.github.com/mtrpcic/pathjs/master/path.js'
alias get-knockout='wget http://knockoutjs.com/downloads/knockout-3.0.0.js'
alias get-moment='wget https://raw.github.com/timrwood/moment/2.0.0/min/moment.min.js'
alias get-uikit='wget http://visionmedia.github.com/uikit/build/ui.js'
alias get-uikit-css="wget http://visionmedia.github.com/uikit/build/ui.css"
alias get-chosen="wget https://raw.github.com/harvesthq/chosen/master/chosen/chosen.jquery.js"
alias get-chosen-css="wget https://raw.github.com/harvesthq/chosen/master/chosen/chosen.css"
alias get-spin="wget http://fgnass.github.com/spin.js/dist/spin.js"
alias get-es5-shim="wget https://raw.github.com/kriskowal/es5-shim/master/es5-shim.js"
alias get-angular="wget http://code.angularjs.org/1.1.5/angular.min.js"

whichweek(){
	week=`date -d "now" +%U`
	echo "$week + 1" | bc
}

svn-add-all(){
	svn st | grep '^?' | sed 's/^?[ \t]\+//' | xargs -i svn add {}
}

svn-diff-by-extension(){
	exts='';
	for i in "$@"; do
		if [ -z "$exts" ]; then
			exts="$exts -iname \"*.$i\"";
		else
			exts="$exts -o -iname \"*.$i\"";
		fi
	done;
	svn diff $(eval "find -type f $exts")
}

svn-export-changed()
{
	url=$3
	for i in $(svn diff --summarize -r $1:$2 $url| awk '{ print $2 }' | sed -e's/%\([0-9A-F][0-9A-F]\)/\\\\\x\1/g' | xargs echo -e); do
		p=$(echo $i | sed -e 's{'$url/'{{');
		mkdir -p $(dirname $p);
		svn export $i $p;
	done 
}

start-wicd(){
	sudo wicd
	wicd-cli --wireless -c
}

quote(){
	curl --silent http://hackersays.com/quote | json c a
}


# A shortcut function that simplifies usage of xclip.
# - Accepts input from either stdin (pipe), or params.
# ------------------------------------------------
cb() {
  local _scs_col="\e[0;32m"; local _wrn_col='\e[1;31m'; local _trn_col='\e[0;33m'
  # Check that xclip is installed.
  if ! type xclip > /dev/null 2>&1; then
    echo -e "$_wrn_col""You must have the 'xclip' program installed.\e[0m"
  # Check user is not root (root doesn't have access to user xorg server)
  elif [[ "$USER" == "root" ]]; then
    echo -e "$_wrn_col""Must be regular user (not root) to copy a file to the clipboard.\e[0m"
  else
    # If no tty, data should be available on stdin
    if ! [[ "$( tty )" == /dev/* ]]; then
      input="$(< /dev/stdin)"
    # Else, fetch input from params
    else
      input="$*"
    fi
    if [ -z "$input" ]; then  # If no input, print usage message.
      echo "Copies a string or the contents of a file to the clipboard."
      echo "Usage: cb <string or file>"
      echo "       echo <string or file> | cb"
    else
      # Copy input to clipboard
      echo -n "$input" | xclip -selection c
      # Truncate text for status
      if [ ${#input} -gt 80 ]; then input="$(echo $input | cut -c1-80)$_trn_col...\e[0m"; fi
      # Print status.
      echo -e "$_scs_col""Copied to clipboard:\e[0m $input"
    fi
  fi
}

wiki() {
	dig +short txt $1.wp.dg.cx
}

qq-dict() {
	curl -s "http://dict.qq.com/dict?q=$1"
}

givedef(){
    if [[ $# -ge 2 ]] then
        echo "givedef: too many arguments" >&2
        return 1
    else
        curl "dict://dict.org/d:$1"
    fi
}

git-sync() {
	message=$1
	if [ -z "$message" ]; then
		message='sync'
	fi
	git add .
	git ci -am "$message"
	git push
}

min-and-gzipped() {
	uglifyjs $1 | gzip -c | wc -c
}

f(){
	find . -iname "*$1*"
}

runc(){
	cc -Wall -g $1.c -o $1.out && ./$1.out
	rm -f $1.out
}

ignore(){
	touch .gitignore
	cat >> .gitignore <<EOF
*.pyc
/venv/
/node_modules/
/npm-debug.log
/vendor/
bower_components/
.lock.pid
.module-cache/
EOF
	$EDITOR .gitignore
}

init-venv2(){
	virtualenv -p $(which python2) venv
	activate-venv
}

init-venv(){
	virtualenv -p $(which python3) venv
	activate-venv
}

activate-venv(){
	if [ -z "$VENV_ACTIVATED" ]; then
		echo "activate virtualenv?"
		select yn in "Yes" "No"; do
			case $yn in
				Yes)
					source venv/bin/activate;break;
					export VENV_ACTIVATED="$(pwd)";
					break;;
				No)
					break;;
			 esac
		done
	else
		echo "venv (from $VENV_ACTIVATED) already activated"
	fi
}


activate-virthualenv(){
	if [ -z "$VIRTHUALENV_ACTIVATED" ]; then
		echo "activate virthualenv?"
		select yn in "Yes" "No"; do
			case $yn in
				Yes)
					source .virthualenv/bin/activate;
					export VIRTHUALENV_ACTIVATED="$(pwd)";
					break;;
				No)
					break;;
			 esac
		done
	else
		echo "virthualenv (from $VIRTHUALENV_ACTIVATED) already activated"
	fi
}

load_env_sh(){
	if [ -z "$ENVSH_SOURCED" ]; then
		echo "source env.sh?"
		select yn in "Yes" "No"; do
			case $yn in
				Yes)
					source env.sh;
					export ENVSH_SOURCED="$(pwd)";
					break;;
				No)
					break;;
			 esac
		done
	else
		echo "env.sh (from $ENVSH_SOURCED) already sourced"
	fi
}

chpwd(){
	if [ -f venv/bin/activate ]; then
		activate-venv
	fi
	if [ -f env.sh ]; then
		load_env_sh
	fi
	if [ -f .virthualenv/bin/activate ]; then
		activate-virthualenv
	fi

	if [ -n "$INSIDE_EMACS" ]; then
		print -P "\033AnSiTc %d"
	fi
}

duration(){
	ffprobe "$1" 2>&1 | grep -i duration
}

hourglass(){ trap 'tput cnorm' EXIT INT;local s=$(($SECONDS +$1));(tput civis;while [[ $SECONDS -lt $s ]];do for f in '|' '\' '-' '/';do echo -n "$f" && sleep .2s && echo -n $'\b';done;done;);tput cnorm;}

uncommited(){
	for gitdir in `find ./ -maxdepth 2 -name .git`; 
	do 
		workdir=${gitdir%/*}; 
		echo; 
		echo $workdir; 
		git --git-dir=$gitdir --work-tree=$workdir status; 
	done
}

share(){
	if [ -z "$1" ]; then
		return
	fi
	if [ -f ~/.share-pid ]; then
		if [ kill -0 $(cat ~/.share-pid) > /dev/null 2>&1 ]; then
			echo 'server is running'
		else
			share-start
		fi
	else
		share-start
	fi
	ln -nsf "$(readlink -e "$1")" ~/.share-tmp/
}

share-start(){
	echo 'staring server'
	mkdir ~/.share-tmp
	port=8888
	if [ -n "$1" ]; then
		port=$1
	fi
	cd ~/.share-tmp
	python2 -mSimpleHTTPServer $port &>! ~/.share-log & echo "$!" >! ~/.share-pid
	ls -1
	cd - > /dev/null
}

share-stop(){
	kill $(cat ~/.share-pid) &> /dev/null
	rm -rf ~/.share-tmp
	rm -f ~/.share-pid
}

github-clone(){
	git clone git@github.com:$1/$2.git
}

bitbucket-username(){
	if [ -z "$BITBUCKET_USERNAME" ]; then
		export BITBUCKET_USERNAME=$(cat $HOME/.bitbucket-username)
	fi
	echo $BITBUCKET_USERNAME
}

bitbucket-passwd(){
	if [ -z "$BITBUCKET_PASSWD" ]; then
		export BITBUCKET_PASSWD=$(cat $HOME/.bitbucket-passwd)
	fi
	echo $BITBUCKET_PASSWD
}

bitbucket-setup(){
	echo -n "username: "
	read username
	echo -n "passwd: "
	read -s password
	echo $username >! $HOME/.bitbucket-username
	echo $password >! $HOME/.bitbucket-passwd
	chmod 600 $HOME/.bitbucket-username
	chmod 600 $HOME/.bitbucket-passwd
}

bitbucket-list(){
	curl -s --user "$(bitbucket-username):$(bitbucket-passwd)" https://api.bitbucket.org/1.0/user/repositories | json | sed -n '/name/ s/^[^:]\+\: \"\([a-zA-Z0-9_-]\+\)\"\,/\1/p'
}

bitbucket-new(){
	name=$1
	is_private=$2
	if [ -z "$is_private" ]; then
		is_private='true'
	fi
	scm=$3
	if [ -z "$scm" ]; then
		scm='git'
	fi
	curl -s --user "$(bitbucket-username):$(bitbucket-passwd)" https://api.bitbucket.org/1.0/repositories/ --data "name=$name;is_private=$is_private;scm=$scm"
}

bitbucket-delete(){
	repo_name=$1
	curl -s -X DELETE --user "$(bitbucket-username):$(bitbucket-passwd)" https://api.bitbucket.org/1.0/repositories/$(bitbucket-username)/$repo_name
}

bitbucket-clone(){
	git clone git@bitbucket.org:$(bitbucket-username)/$1.git
}

bitbucket-add-remote(){
	git remote add origin ssh://git@bitbucket.org/$(bitbucket-username)/$1.git
}

mxmlc-release(){
	output=$3
	if [ -z "$output" ]; then
		output=output.swf
	fi
	libpath=$2
	if [ -z "$libpath" ]; then
		libpath=$FLEX_LIB_PATH
	fi
	mxmlc $1\
	 -external-library-path $libpath\
	 -output $output\
	 -default-size=600,400\
	 -default-frame-rate=24\
	 -default-background-color=0xffffff\
	 -static-link-runtime-shared-libraries\
	 -optimize=true\
	 -debug=false
}

mxmlc-debug(){
	output=$3
	if [ -z "$output" ]; then
		output=output.swf
	fi
	libpath=$2
	if [ -z "$libpath" ]; then
		libpath=$FLEX_LIB_PATH
	fi
	mxmlc $1\
	 -external-library-path+=$libpath\
	 -output $output\
	 -default-size=600,400\
	 -default-frame-rate=24\
	 -default-background-color=0xffffff\
	 -static-link-runtime-shared-libraries\
	 -optimize=false\
	 -debug=true
}

rename-after-time(){
	target="$(dirname $1)/$(date -d now +%Y-%m-%d-%H-%M-%S).${1##*.}"
	mv "$1" "$target"
	echo "$target"
}

shot(){
	mplayer -vo jpeg -frames 2 tv:// &> /dev/null
	rm -f 00000001.jpg
	img="$(rename-after-time 00000002.jpg)"
	if [ -n "$1" ]; then
		mv "$img" "$1"
		img="$1/$img"
	fi
	echo "$img"
}


mount-ntfs(){
	mkdir -p $2
	ntfs-3g /dev/$1 $2
	# mount -t ntfs -o nls=utf8,umask=0022,gid=$(id -g),uid=$(id -u)  /dev/$1 $2
}

pdf-compress(){
	gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/screen -dNOPAUSE -dQUIET -dBATCH -sOutputFile=$2 $1
}

pdf-concat(){
	for pdf in $*; do
		pdf2ps $pdf
	done
	rm merged.ps
	cat *.ps > merged.ps
	ps2pdf merged.ps
}


_mux(){
	_arguments ":::($(mux ls | tail -n +2))"
}
compdef _mux mux

_pman(){
	_arguments ":::($(php -r 'echo implode(PHP_EOL,get_defined_functions()["internal"]);'))"
}
compdef _pman pman

wget-proxy(){
	host=$1
	name="/tmp/wget-$2"
	url="$3"
	ssh $host "wget -O $name '$url'"
	scp $host:$name $2
}

youtube-dl-proxy(){
	host=$1
	name="/tmp/youtube-dl-$2"
	url="$3"
	ssh $host "youtube-dl -o $name '$url'"
	scp $host:$name $2
}

redis-eval(){
	redis-cli eval "$(cat $1)" "${@:2}"
}

# setopt NO_GLOB
command_not_found_handler() {
	case ${1: -1} in
		\?)
			man ${1:0: -1}
			;;
		!)
			tsocks ${1:0: -1} ${@:2}
			;;
		+)
			;;
		*)
			case ${1:0:1} in
				@)
					ssh ${1:1} "${@:2}"
					;;
				*)
					exit 1
			esac
	esac
}

urls()
{
	results="$(tmux capture-pane \; show-buffer -b0 \; delete-buffer -b0 \
		| grep -P -o '(?:https?://|\bwww\.)[a-zA-Z0-9\-\@;\/?:&=%\$_.+!*\x27,~#]*(\([a-zA-Z0-9\-\@;\/?:&=%\$_.+!*\x27,~#]*\)|[a-zA-Z0-9\-\@;\/?:&=%\$_+*~])+' \
		| sort | uniq)"
	echo "$results" | nl -w 3 -s ': ' | sed -e "s/[0-9]\+:/\x1b[32m&\x1b[0m/" 
	echo -n "===> "
	read num
	if [[ "$num" =~ ^[0-9]+$ ]]; then
		selected=$(sed -n "$num p" <<< "$results")
		xdg-open $selected
	fi
}

memcached-flush(){
	php -r '$m = new Memcached; $m->addServer("localhost",11211); $m->deleteMulti($m->getAllKeys());'
}

memcached-keys(){
	php -r '$m = new Memcached; $m->addServer("localhost",11211); echo implode("\n",$m->getAllKeys());'
}

haxe-js(){
	class=${1%.*}
	haxe -js $class.js -main $class $1 && node $class.js
}

dual () {
	xrandr --output LVDS1 --primary --left-of VGA1 --output VGA1 --auto
}

single () {
	xrandr --output VGA1 --off
}

upsidedown(){
	LD_PRELOAD=/usr/lib/i386-linux-gnu/libv4l/v4l1compat.so $*
}

bd(){
	cd $(pwd | sed 's|\(.*/'$1'[^/]*/\).*|\1|')
}

git-date(){
	commit=$1
	date="$2"
	git filter-branch --env-filter \
		'if [ $GIT_COMMIT = $commit ]
		 then
			export GIT_AUTHOR_DATE="$date"
			export GIT_COMMITTER_DATE="$date"
		 fi'
}

git-amend-date() {
	GIT_COMMITTER_DATE="$1 +0800" git commit --amend -C HEAD --date "$1 +0800"
}

nocolor(){
	sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"
}

ranger-cd(){
	tempfile='/tmp/ranger-chosendir'
	ranger --choosedir="$tempfile" "${@:-$(pwd)}"
	test -f "$tempfile" && if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
		cd -- "$(cat "$tempfile")"
	fi
	rm -f -- "$tempfile"
}

alias rcd=ranger-cd

setup-rbenv() {
	git clone git://github.com/sstephenson/rbenv.git ~/.rbenv
	mkdir -p ~/.rbenv/plugins
	git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
}

setup-pyenv() {
	git clone git://github.com/yyuu/pyenv.git ~/.pyenv
}

setup-nvm() {
	git clone https://github.com/creationix/nvm ~/.nvm
}

setup-zsh() {
	git clone https://github.com/robbyrussell/oh-my-zsh ~/.oh-my-zsh
}

setup-git() {
	cd /tmp && git clone --depth 1 https://github.com/visionmedia/git-extras.git && cd git-extras && sudo make install
}

html-coffee() {
	cat > $1.html << EOF
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title></title>
</head>
<body>
	
<script src="$1.js"></script>
</body>
</html>
EOF

touch $1.{coffee,js}
}

alias pip-install='pip install -r requirements.txt -i http://pypi.douban.com/simple'

alias get-bing-image='curl $(curl "http://www.bing.com/HPImageArchive.aspx?format=js&idx=0&n=1" | json images.0.url) > $(date -d now +%Y-%m-%d).jpg' 

qr() {
	content="$1"
	if [ -z "$content" ]; then
		content="$(xclip -o)"
	fi
	if [ -n "$content" ]; then
		qrencode "$content" -o /tmp/qrencode.png && qiv /tmp/qrencode.png
	else
		echo empty input
	fi
}
