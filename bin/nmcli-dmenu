#!/usr/bin/env python
"""NetworkManager command line dmenu script.

To add new connections or enable/disable networking requires policykit
permissions setup per:
https://wiki.archlinux.org/index.php/NetworkManager#Set_up_PolicyKit_permissions

OR running the script as root

Add dmenu formatting options if desired to ~/.config/networkmanager-dmenu/config.ini

"""
from os.path import expanduser
from shlex import split
from subprocess import Popen, PIPE
import sys
try:
    import configparser as configparser
except ImportError:
    import ConfigParser as configparser


def dmenu_cmd():
    """Parse config.ini if it exists and add options to the dmenu command

    Returns: string  "dmenu -l {} -p {} -i ....."

    """
    dmenu = "dmenu -l {} -p {} -i"
    conf = configparser.ConfigParser()
    c = conf.read(expanduser("~/.config/networkmanager-dmenu/config.ini"))
    if not c:
        return dmenu
    else:
        extras = ["-{} {}".format(*i) for i in conf.items('dmenu')]
        return "{} {}".format(dmenu, " ".join(extras))


def current_conns():
    """Get list of current NetworkManager connections (ssid:security)

    Returns: list of strings: ['firecat4153:WPA2', 'firecat4153x:WEP'...]

    """
    conns = ("nmcli -t -f name,type con list")
    return Popen(split(conns),
                 stdout=PIPE).communicate()[0].decode().split('\n')


def current_ssids():
    """Get list of current SSIDs seen by NetworkManager and order by signal
    strength

    Returns: list -
        ["firecat4153:WPA2","firecat4153-guest:", "firecat4153x:WPA2"]

    """
    scan = ("nmcli -t -f ssid,security,signal dev wifi list")
    res = Popen(split(scan), stdout=PIPE).communicate()[0].decode().split("\n")
    del res[-1]
    res = [i.rsplit(':', 1) for i in res]
    res = sorted(res, key=lambda x: x[1], reverse=True)
    return [i[0].replace("'", "") for i in res]


def vpn_connections(conns):
    """Parse list of current connections for VPNs

    Args: conns - ['ssid:security', 'firecat4153:WPA2', ...]
    Returns: list of VPN connection names ['pia_us_west',...]

    """
    conns = [i.split(':') for i in conns if i]
    return [i[0] for i in conns if i and 'vpn' in i[1]]


def get_network_status():
    """Get current status of networking

    Returns: string 'Enable' or 'Disable',

    """
    stat = ("nmcli -t -f STATE nm status")
    res = Popen(split(stat), stdout=PIPE).communicate()[0]
    if 'connect' in res.decode():
        return 'Disable'
    else:
        return 'Enable'


def get_active_connections():
    """Get currently active connections

    Returns: list of strings

    """
    status = ("nmcli -t -f name con status")
    active = Popen(split(status), stdout=PIPE).communicate()[0]
    active = active.decode().split('\n')
    del active[-1]
    return active


def mark_active(conns, active):
    """Given a list of connections, mark currently active connections

    Args: conns - list of strings
    Returns: list of strings (active prepended with a '**')

    """
    conn_t = [i.split(":")[0] for i in conns]
    act = [i for i in conn_t if i and i in active]
    for i, conn in enumerate(conn_t):
        if conn in act:
            conns[i] = "**{}".format(conns[i])
    return conns


def other_actions():
    """Return list of other actions that can be taken

    """
    return ["{} Networking".format(get_network_status()),
            "Launch Connection Manager"]


def get_selection(ssids, vpns, other):
    """Combine the arg lists and send to dmenu for selection.

    Args: args - ssids: list of strings
                 vpns: list of strings
                 other: list of strings
    Returns: selection (string)

    """
    active = get_active_connections()
    vpns = ["{}:VPN".format(i) for i in vpns]
    inp = mark_active(ssids, active) + [""] + \
          mark_active(vpns, active) + [""] + other
    inp_bytes = "\n".join(inp).encode()
    sel = Popen(split(dmenu_cmd().format(len(inp), "Actions")),
                stdin=PIPE,
                stdout=PIPE).communicate(input=inp_bytes)[0].decode()
    if not sel.strip():
        sys.exit()
    return sel.strip()


def toggle_existing(conn):
    """Get conn status, then toggle connection up or down if it's not
    'activated'

    Args: conn - string

    """
    conn_status = ("nmcli -t -f GENERAL con status id {}".format(conn))
    res = Popen(split(conn_status), stdout=PIPE).communicate()[0]
    if 'activated' not in res.decode():
        updown = 'up'
    else:
        updown = 'down'
    conn_string = ("nmcli con {} id {}".format(updown, conn))
    Popen(split(conn_string), stdout=PIPE).communicate()


def toggle_networking(sel):
    """Enable/disable networking

    Args: sel - string ('Enable Networking' or 'Disable Networking')

    """
    if sel.startswith('Enable'):
        updown = 'true'
    else:
        updown = 'false'
    net = ("nmcli nm enable {}".format(updown))
    Popen(split(net), stdout=PIPE).communicate()


def launch_connection_editor():
    """Launch the gui nm-connection-editor

    """
    Popen(["nm-connection-editor"]).communicate()


def get_passphrase():
    """Get a password

    Returns: string

    """
    return Popen(split(dmenu_cmd().format(0, "Passphrase")),
                 stdin=PIPE, stdout=PIPE).communicate()[0].decode()


def set_new_connection(ssid, pw):
    """Setup a new NetworkManager connection

    Args: ssid - string
          pw - string

    """
    pw = "password {}".format(pw)
    new_conn = ("nmcli dev wifi connect {} {}".format(ssid, pw))
    Popen(split(new_conn), stdout=PIPE).communicate()


def run():
    conns = current_conns()
    vpns = vpn_connections(conns)
    ssids = current_ssids()
    other = other_actions()
    sel = get_selection(ssids, vpns, other)
    if sel in other:
        # Parse other actions
        if 'Networking' in sel:
            toggle_networking(sel)
        elif 'Launch' in sel:
            launch_connection_editor()
        sys.exit()
    elif sel in ssids:
        # Set ssid, security if selection is an SSID
        ssid, security = sel.split(":")
        ssid = ssid.strip("'").strip().replace("**", "")
        security = security.strip()
    elif sel.replace(":VPN", "").replace("**", "") in vpns:
        # Select VPN connection (sel="pia_us_west:VPN")
        ssid = sel.replace(":VPN", "").replace("**", "")
    else:
        sys.exit()
    # Decide if selection is existing connection or new
    if ssid in [i.split(':')[0] for i in conns if i][1:]:
        toggle_existing(ssid)
    else:
        if security:
            pw = get_passphrase()
        else:
            pw = ""
        set_new_connection(ssid, pw)


if __name__ == '__main__':
    run()
