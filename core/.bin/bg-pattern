#!/usr/bin/env python
from __future__ import division
import Image,os,sys
import math

if len(sys.argv) < 4:
	sys.exit(1)

def tohex(color):
	if len(color) == 1:
		color = color*6
	elif len(color) == 3:
		color = ''.join([c*2 for c in color])
	return int(color, 16)

primary,secondary = map(tohex,sys.argv[1:3])

def cmp(x,y,w,h):
	return x>y

def cmp2(x,y,w,h):
	return math.sin(x) > math.sin(y)

def cmp3(x,y,w,h):
	return math.sin(x) > math.cos(y)

def eq(x,y,w,h):
	return math.sin(x) == math.sin(y)

def eq2(x,y,w,h):
	return x*x > (y+y)*10

def square(x,y,w,h):
	return x*x>y

def sin(x,y,w,h):
	return math.sin(x) > math.sin(y)

def sinx(x,y,w,h):
	return math.sin(x) > 0

def sin10x(x,y,w,h):
	return math.sin(x*10) > 0

def add(x,y,w,h):
	return x+y>x*y

def add2(x,y,w,h):
	return x+y>x*y*0.5

def add1(x,y,w,h):
	return x+y>x*y*0.1

def cmp4(x,y,w,h):
	return (x+y)*(x+y) > w*h

def cmp5(x,y,w,h):
	return (x*y) > w+h

cmp5_1 = lambda x,y,w,h: x*y -x -y > w +h

def cmp6(x,y,w,h):
	return x/h < y/w

cmp7 = lambda x,y,w,h: x+h > y+w

cmp8 = lambda x,y,w,h: x*x > w + h +y*y

cmp9 = lambda x,y,w,h: x*x + y*y > w*w


method = locals().get(sys.argv[3])

if method is None:
	sys.exit(1)

w = int( sys.argv[4] if len(sys.argv)>4 else 100 )
h = int( sys.argv[5] if len(sys.argv)>5 else w )

img=Image.new('RGB',(w,h))

for x in range(w):
	for y in range(h):
		img.putpixel((x,y),primary if method(x,y,w,h) else secondary)

img.save(os.path.expanduser('~/.wallpaper.png'))
os.system('feh --bg-tile ~/.wallpaper.png')
